/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void addVal(TreeNode* root, int val) {
        if(!root) return;
        root->val += val;
        if(root->left) addVal(root->left, val);
        if(root->right) addVal(root->right, val);
    }
    
    TreeNode* copy(TreeNode* root) {
        if(!root) return nullptr;
        TreeNode* c = new TreeNode(root->val);
        if(root->left) c->left = copy(root->left);
        if(root->right) c->right = copy(root->right);
        
        return c;
    }
    
    vector<TreeNode*> generateTrees(int n) {
        vector<vector<TreeNode*>> subtree(9, vector<TreeNode*>());
        // subtree[m] == all BST generated by [1, m]
        
        // memoization
        subtree[0].push_back(nullptr);
        for(int m = 1; m <= n; m++) {
            // compute subtree[m]
            for(int r = 1; r <= m; r++) {
                // root->val   = r
                // root->left  = BST generated by [1, r-1]
                // root->right = BST generated by [r+1, m]
                TreeNode* root = new TreeNode(r);
                for(auto left: subtree[r-1]) {
                    root->left = left;
                    for(auto right: subtree[m-r]) {
                        root->right = right;
                        TreeNode* newTree = copy(root);
                        addVal(newTree->right, r);
                        subtree[m].push_back(newTree);
                    }
                }
            }
        }
        return subtree[n];
    }
};